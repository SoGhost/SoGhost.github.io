<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PY-&gt; Blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on PY-&gt; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>us-en</language>
    <lastBuildDate>Wed, 08 Aug 2018 13:34:19 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UGUI</title>
      <link>/post/ugui/</link>
      <pubDate>Wed, 08 Aug 2018 13:34:19 +0800</pubDate>
      
      <guid>/post/ugui/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unity 动画系统（1）</title>
      <link>/post/unity-animat-01/</link>
      <pubDate>Mon, 06 Aug 2018 11:45:28 +0800</pubDate>
      
      <guid>/post/unity-animat-01/</guid>
      <description>Mecanim——核心功能  内置动画状态机系统(Animator)      Controller 角色控制器     Avatar (骨骼替身) 替身骨骼   Apply Root Motion ( 应用根运动 )    Update Mode ( 刷新模式 )    Culling Mode (选择模式)       人物动画的重定向   更换的Avatar即可重复使用动画。
1.在Model 选取界面，选择 RIG&amp;ndash;&amp;gt;Animation Type-&amp;gt;Humanoid(人形的)-&amp;gt;Apply
2.然后可以配置人物骨骼Avatar。
  动画的分解与混合   Blend Tree：混合树
通过Blend Tree混合多个动画。
通过遮罩体同时播放多个动画。
  关节动画的 IK 逆向定位   IK用于实现角色始终看着一个物体、一个关节与物体绑定。</description>
    </item>
    
    <item>
      <title>JSON格式</title>
      <link>/post/json/</link>
      <pubDate>Mon, 06 Aug 2018 07:42:20 +0800</pubDate>
      
      <guid>/post/json/</guid>
      <description>JSON简介  JSON：是一种轻量级的数据交换格式。基于JavaScript的一个子集。JSON采用完全独立于语言的文本格式。Unity主要使用JSON进行服务器端和客户端数据传输。
 JSON结构  通过对象、数组两种结构，就可以组成复杂的数据结构。
  JSON对象   对象：表示为 ‘ {} ’ 括起来的内容，数据结果为键值对的结构。
{ &amp;ldquo;name&amp;rdquo; : &amp;ldquo;Test Name&amp;rdquo; }
属性可以为 数字、字符串、数组、对象。
  JSON数组   数组：中括号 &amp;lsquo; [ ] &amp;lsquo; 括起来的内容，数据结构为 [ &amp;ldquo;C#&amp;rdquo;, &amp;ldquo;Unity&amp;rdquo;, &amp;hellip;] ，取值方式和所有语言一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象。
  JSON示例  1 2 3 4 5 6 7 8 9  //Json对象 { &amp;#34;name&amp;#34;:&amp;#34;Ted&amp;#34;, &amp;#34;Lv&amp;#34;:1, &amp;#34;Job&amp;#34;:&amp;#34;法师&amp;#34;, &amp;#34;Exp&amp;#34;:1.1 } //复杂Json对象 { &amp;#34;name&amp;#34;:&amp;#34;Jack&amp;#34;, &amp;#34;info&amp;#34;:{ &amp;#34;Lv&amp;#34;:2, &amp;#34;Job&amp;#34;:&amp;#34;战士&amp;#34;, &amp;#34;Exp&amp;#34;:2.</description>
    </item>
    
    <item>
      <title>AI逻辑</title>
      <link>/post/unity-ai-01/</link>
      <pubDate>Sun, 05 Aug 2018 18:36:56 +0800</pubDate>
      
      <guid>/post/unity-ai-01/</guid>
      <description>AI  Navigation   给Enemy添加 New Mesh Agent。
 Acceleration：加速度 Angular Speed：转向速度    常用方法
 SetDestination(player_position);   添加寻找对象。
  AI 逻辑 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  using UnityEngine; using System.</description>
    </item>
    
    <item>
      <title>游戏常用英文</title>
      <link>/post/game-words/</link>
      <pubDate>Sun, 05 Aug 2018 14:48:59 +0800</pubDate>
      
      <guid>/post/game-words/</guid>
      <description>常见单词 1.角色属性类：  角色 Character 力量 Strength 耐力 Stamina/Patience 智力 Intellect 免疫力 Immune/Immunity 生命力 Hit Point(HP) 魔法力 Magic Point(MP) 命中率 Accuracy 速度 speed 防御 Defense 敏锐 Subtlety 伤害 Damage 护甲 Armor 能量 power 危险 danger 安全 safety 经验点数 Experience Point 升级 Level Up
 2.技能效果类：  技能 skill 净化 Cleansing 复活 Reincarnate 石化 Petrify 灼烧 Cauterize 重击 Smite 伪装 Camouflage 致盲 Blind 背刺 Backstab 埋伏 Ambush 吸魔 Drain Mana 吸血 Drain Life 躲避 Miss 守护 Guard 隐形 Clock 祝福 Blessed 加血 add blood 持续时间 Duration</description>
    </item>
    
    <item>
      <title>FPS_视角和移动</title>
      <link>/post/unity-fps-view_move/</link>
      <pubDate>Sun, 05 Aug 2018 14:48:37 +0800</pubDate>
      
      <guid>/post/unity-fps-view_move/</guid>
      <description>主要涉及知识  1、Input.GetAxis(“Mouse X”)：获取鼠标延左右移动的速度 2、Input.GetAxis(“Mouse Y”)：获取鼠标延上下移动的速度 3、Input.GetKeyDown(“escape”)：按下esc键 4、transform.Rotate()：使物体旋转，如果最后一个参数relativeTo默认以局部坐标旋转，如果设置为-Space.World（世界坐标系），则旋转应用于世界x，y，z轴。 5、transform.localEulerAngles：物体的欧拉角（相对于父级的坐标），此例子我们直接改变物体的欧拉角以达到旋转的效果。和用transform.Rotate()改变有所区别 6、Mathf.Clamp()： 7、Cursor.lockState = CursorLockMode.Locked;将光标锁定到游戏窗口的中心。 Cursor.lockState = CursorLockMode.Confined;将光标限制在游戏窗口。 8、Cursor.visible = false;隐藏光标 9、CharacterController：CharacterController类。CharacterController允许你简单地做碰撞约束的移动，而不必处理刚体。 10、CharacterController.Move()：通过运动移动控制器，并且受碰撞约束，会延着碰撞体表面滑动，它不受重力影响。（相对于世界坐标系来移动物品） 11、transform.TransformDirection()：转换为世界坐标系 12、Vector3.ClampMagnitude()：限制一个向量的最大长度。  镜头跟随鼠标旋转 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  using UnityEngine; using System.</description>
    </item>
    
    <item>
      <title>Unity Audio</title>
      <link>/post/unity-audio-01/</link>
      <pubDate>Sun, 05 Aug 2018 09:39:51 +0800</pubDate>
      
      <guid>/post/unity-audio-01/</guid>
      <description> Audio Source  1.Audio Source
 Audio Clip：音频剪辑
 Output：输出
 Audio Mixer Group：音频混音器组
 Mute：静音
 Bypass Effectes：绕过效果
 Bypass Listener Effects：绕过监听器效果
 Bypass Reverb Zones：绕过混响区
 Play On Wake：开始时播放
 Loop：循环
 Priority：优先
 Volume：音量
 Pitch：
 Stereo Pan：
 Spatial Blend：空间混合
 Reverb Zone Mix：
  2.3D Sound Setting
 Doppler Level：多普勒级别 Spread：传播 Volume Rolloff： Min Distance：最小距离 Max Distance：最大距离   </description>
    </item>
    
    <item>
      <title>脚本的输入与控制</title>
      <link>/post/script-input_control/</link>
      <pubDate>Mon, 30 Jul 2018 16:36:45 +0800</pubDate>
      
      <guid>/post/script-input_control/</guid>
      <description>鼠标输入 1.OnMouse方法  OnMouseEnter()：当鼠标进入GUIElement或Collider时调用。（只调用一次）
OnMouseExit()：鼠标离开GUIElement或Collider时调用。
OnMouseOver()：鼠标悬停在GUIElement或Collider上时调用每一帧。
OnMouseDown()：鼠标在GUIElement或Collider上点击时调用。
OnMouseIp()：释放鼠标按钮时调用。
OnMouseDrag()：鼠标拖拽GUIElement或Collider时调用。
OnMouseUpAsButton()：只有当鼠标在同一个GUIElement或Collider按下，释放时调用。
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class ObjectController : MonoBehaviour { private void OnMouseEnter()//当鼠标进入GUIElement或Collider时调用。（只调用一次）  { this.transform.localScale = new Vector3(1.3f, 1.3f, 1.3f);//物体放大1.3倍  } private void OnMouseExit()//鼠标离开  { this.transform.localScale = new Vector3(1f, 1f, 1f);//大小还原  this.transform.rotation = new Quaternion(0f,0f,0f,0f);//位置还原  } private void OnMouseOver()//鼠标悬停在GUIElement或Collider上时调用每一帧。  { this.</description>
    </item>
    
    <item>
      <title>MonoBehavior 常用方法</title>
      <link>/post/monobehavior-common_method-01/</link>
      <pubDate>Mon, 30 Jul 2018 15:04:16 +0800</pubDate>
      
      <guid>/post/monobehavior-common_method-01/</guid>
      <description>继承函数  继承自Object
 Destroy：物体销毁
 Instantiate：物体生成
 CompareTag：物体辨认
  继承自Component
 SendMessage：消息推送   自身函数 1.Invoke：延迟执行程序
 Invoke(string methodName, float time); InvokeRepeating(string methodName, float time, float repeatRate);   重复调用函数，重复间隔。
  IsInvoking(string methodName);   检测是否在继续调用。
  CanceInvoke();  CanceInvoke(string methodName);    清楚所有Invoke或针对某一函数。
    2.Coroutine：协同执行程序</description>
    </item>
    
    <item>
      <title>使用软件突发小技巧</title>
      <link>/post/use-skill/</link>
      <pubDate>Sun, 29 Jul 2018 16:55:57 +0800</pubDate>
      
      <guid>/post/use-skill/</guid>
      <description> 按住 shift ，在准备复制文字（或其它）的一头按鼠标左键，在另一头按下左键，即可选中两头中的所有文字（或其它）。
 </description>
    </item>
    
    <item>
      <title>C# _语言基础</title>
      <link>/post/c-sharp-notes-02/</link>
      <pubDate>Fri, 27 Jul 2018 08:18:12 +0800</pubDate>
      
      <guid>/post/c-sharp-notes-02/</guid>
      <description>值类型  包括自定义struct类型，enum枚举类型。值类型存储在内存的栈上面，在堆上面存储具体值。
值类型继承于System.ValueType，所有的类继承于System.Object。(Object是所有类型的基类)
/// 注释——为解释方法，类，空间&amp;hellip;进行说明
  struct——类型   用于打包封装小的数据集，可以(像class)建方法、事件&amp;hellip;。
  enum——类型   用于限定变量可能性。
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #namespace test { class Program { //角标从0开始，Mon=1，使强制从一开始  //enum Days : byte :short 转换类型  enum Days { Mon, Tues, Wenes, Thurs, Fri, Satur, Sun}//整数型  struct Perosn { public int age; private string name; internal string fname;//命名空间内可以访问  protected string lastName;//protected 只有继承于它，才能访问  } static void Main(string[] args) { Person perosn = new Perosn(); person.</description>
    </item>
    
    <item>
      <title>C# _基本操作</title>
      <link>/post/c-sharp-notes-01/</link>
      <pubDate>Tue, 24 Jul 2018 07:43:47 +0800</pubDate>
      
      <guid>/post/c-sharp-notes-01/</guid>
      <description>1.定义变量 必须声明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  //&amp;amp;&amp;amp;逻辑和||逻辑或 class Program { static void (string[] args) { int a=3; int b=0; if(a==3) { b=4; } else if(a==4) { b=5; } Console.ReadKey();//获取按键 暂停  } }   2.if() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  //随机抽卡 Random random = new Random(); int r = random.</description>
    </item>
    
    <item>
      <title>Monobehavior事件响应（1）</title>
      <link>/post/unity-script-01/</link>
      <pubDate>Sat, 21 Jul 2018 15:26:16 +0800</pubDate>
      
      <guid>/post/unity-script-01/</guid>
      <description>启动与刷新函数 启动  Reset() Awake()   在游戏开始之前初始化任何变量或游戏状态。
  Start   在任何Update方法之前，只调用一次。
 刷新  FixUpdate()   每个固定帧率帧都会调用此函数。 (用于物理效果)
  Update()   则每帧调用更新。(用于处理逻辑)
  LateUpdate()   每帧都会调用LateUpdate 。在调用所有Update函数后调用LateUpdate。
 交互函数 1.物理 Physic OnTriggerEnter()  当Collider进入trigger时调用
 OnTriggerStay()  当Collider停留trigger时每一帧被调用
 OnTriggerExit()  当Collider离开trigger时调用
 OnaCollisionEnter()  当collider/rigidbody触发另一个rigidbody/collider时被调用
 OnCollisionStay()  当collider/rigidbody触发另一个rigidbody/collider时，将会在每一帧被调用
 OnCollisionExit()  当collider/rigidbody停止触发另一个rigidbody/collider时被调用
 2.输入 Input 3.渲染 Rendering 4.对象与组件 OnEnable()  当对象变为可用或激活状态时此函数被调用</description>
    </item>
    
    <item>
      <title>Unity 注意事项</title>
      <link>/post/unity-notes-01/</link>
      <pubDate>Sat, 21 Jul 2018 10:38:10 +0800</pubDate>
      
      <guid>/post/unity-notes-01/</guid>
      <description> 疑难杂症——👇 一亿个注意: 1.Local和Global  Local是指的自身的坐标，Global指的是世界坐标。
假如一个物体没有父物体（即这个物体不是某个物体的子物体），或者父物体的坐标为（0，0，0）。这时候Local和Global的坐标是一样的。
假如有父物体，Local坐标是相对与父物体的坐标，而Global是指在空间中实际的坐标。
 2.Awake()和Start()  Awake()在游戏开始时自动调用，无论是否激活脚本组件都能被调用，一般用来创建变量。
Start()在Awake之后Update之前，一般用来初始化变量。
 3.Update()和FixUpdate()  Update()每一帧调用一次，一般用于非物理运动，如逻辑运算 。
Fixupdate()每隔固定时间调用一次，通过Edit-&amp;gt;Project Settings-&amp;gt;Time 进行设置，默认为20毫秒 ，一般用于物理运动。
 4.transform01translate0  transform是Gameobject的位置属性，translate是一个动作属性。
获取某个object的位置信息时就是transform，若是对其做动作，那就translate。
 5. </description>
    </item>
    
    <item>
      <title>Word Book</title>
      <link>/post/words-notes/</link>
      <pubDate>Fri, 20 Jul 2018 15:14:20 +0800</pubDate>
      
      <guid>/post/words-notes/</guid>
      <description>Word Note edit 编辑
assets 资源；资产
enable 允许；可用；使能够
disable 禁用/不可用
inspector 检视窗口
hierarchy 层级窗口
component 组件
variable 变量
scene 场景
analytics 分析
project 工程窗口
packages 包；封装；包装
static 静态
layer 层
layouts 布局
mesh 网格
renderer 渲染器
filter 过滤器
shader 着色器
collider 碰撞体
rigidbody 刚体
collider 碰撞体
trigger 触发
material 材质；材料
collision 碰撞
velocity 力；速度
eulerAngles 欧拉角
description 描述
transform 改变
translate 翻译；转化
rotation 旋转
position 位置；方位
scale 缩放；比例；规模
mass 质量</description>
    </item>
    
  </channel>
</rss>