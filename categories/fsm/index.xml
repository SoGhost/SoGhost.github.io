<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fsm on PY-&gt; Blog</title>
    <link>/categories/fsm/</link>
    <description>Recent content in Fsm on PY-&gt; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>us-en</language>
    <lastBuildDate>Sun, 09 Sep 2018 09:16:19 +0800</lastBuildDate>
    
	<atom:link href="/categories/fsm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>有限状态机</title>
      <link>/post/finite-state-machine/</link>
      <pubDate>Sun, 09 Sep 2018 09:16:19 +0800</pubDate>
      
      <guid>/post/finite-state-machine/</guid>
      <description>有限状态机（Finite-state machine，FSM）：
 又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。
 动画控制器控制多个状态，用于实现两个状态之间的跳转。 0  动画分成：动画控制层、位移控制层、数据层、逻辑控制层。
amp;gt; // 示例 FSM &amp;gt; /// &amp;lt;summary&amp;gt; &amp;gt; /// 状态共同的特性，抽象为一个基类 &amp;gt; /// &amp;lt;/summary&amp;gt; &amp;gt; public class FSMBase &amp;gt; { &amp;gt; public virtual void OnEnter() &amp;gt; {} &amp;gt; public virtual void OnStay() &amp;gt; {} &amp;gt; public virtual void OnExit() &amp;gt; {} &amp;gt; } &amp;gt; &amp;gt; /// &amp;lt;summary&amp;gt; &amp;gt; /// 管理多个FSMBase &amp;gt; /// &amp;lt;/summary&amp;gt; &amp;gt; public class FSMManager &amp;gt; { &amp;gt; //数组存储所有状态 &amp;gt; FSMBase[] allState; &amp;gt; &amp;gt; #region Initial &amp;gt; &amp;gt; // #region (Name) &amp;gt; // #endregion，可以折叠中段代码 &amp;gt; //进一步封装初始化，构造函数 &amp;gt; public FSMManager(int stateCount) &amp;gt; { &amp;gt; Initial(stateCount); &amp;gt; } &amp;gt; &amp;gt; //初始化封装 &amp;gt; public void Initial(int stateCount) &amp;gt; { &amp;gt; allState = new FSMBase[stateCount]; &amp;gt; } &amp;gt; &amp;gt; #endregion &amp;gt; &amp;gt; // byte 范围（0~255），节省内存，用于表示状态数足够了 &amp;gt; // sbyte 可以带符号 标记 &amp;gt; sbyte curState = -1;//表示当前存储了多少状态 &amp;gt; &amp;gt; sbyte stateIndex = -1;//表示当前处于状态 &amp;gt; &amp;gt; //添加状态 &amp;gt; public void AddState(FSMBase tmpBase) &amp;gt; { &amp;gt; //防止越界 &amp;gt; if (curState &amp;gt; allState.</description>
    </item>
    
  </channel>
</rss>