<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on PY-&gt; Blog</title>
    <link>/categories/unity/</link>
    <description>Recent content in Unity on PY-&gt; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>us-en</language>
    <lastBuildDate>Mon, 13 Aug 2018 08:47:21 +0800</lastBuildDate>
    
	<atom:link href="/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unity Tilemap模块</title>
      <link>/post/unity-tilemap_mod/</link>
      <pubDate>Mon, 13 Aug 2018 08:47:21 +0800</pubDate>
      
      <guid>/post/unity-tilemap_mod/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AI逻辑</title>
      <link>/post/unity-ai-01/</link>
      <pubDate>Sun, 05 Aug 2018 18:36:56 +0800</pubDate>
      
      <guid>/post/unity-ai-01/</guid>
      <description>AI  Navigation   给Enemy添加 New Mesh Agent。
 Acceleration：加速度 Angular Speed：转向速度    常用方法
 SetDestination(player_position);   添加寻找对象。
  AI 逻辑 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  using UnityEngine; using System.</description>
    </item>
    
    <item>
      <title>FPS_视角和移动</title>
      <link>/post/unity-fps-view_move/</link>
      <pubDate>Sun, 05 Aug 2018 14:48:37 +0800</pubDate>
      
      <guid>/post/unity-fps-view_move/</guid>
      <description>主要涉及知识  1、Input.GetAxis(“Mouse X”)：获取鼠标延左右移动的速度 2、Input.GetAxis(“Mouse Y”)：获取鼠标延上下移动的速度 3、Input.GetKeyDown(“escape”)：按下esc键 4、transform.Rotate()：使物体旋转，如果最后一个参数relativeTo默认以局部坐标旋转，如果设置为-Space.World（世界坐标系），则旋转应用于世界x，y，z轴。 5、transform.localEulerAngles：物体的欧拉角（相对于父级的坐标），此例子我们直接改变物体的欧拉角以达到旋转的效果。和用transform.Rotate()改变有所区别 6、Mathf.Clamp()： 7、Cursor.lockState = CursorLockMode.Locked;将光标锁定到游戏窗口的中心。 Cursor.lockState = CursorLockMode.Confined;将光标限制在游戏窗口。 8、Cursor.visible = false;隐藏光标 9、CharacterController：CharacterController类。CharacterController允许你简单地做碰撞约束的移动，而不必处理刚体。 10、CharacterController.Move()：通过运动移动控制器，并且受碰撞约束，会延着碰撞体表面滑动，它不受重力影响。（相对于世界坐标系来移动物品） 11、transform.TransformDirection()：转换为世界坐标系 12、Vector3.ClampMagnitude()：限制一个向量的最大长度。  镜头跟随鼠标旋转 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  using UnityEngine; using System.</description>
    </item>
    
    <item>
      <title>Unity Audio</title>
      <link>/post/unity-audio-01/</link>
      <pubDate>Sun, 05 Aug 2018 09:39:51 +0800</pubDate>
      
      <guid>/post/unity-audio-01/</guid>
      <description> Audio Source  1.Audio Source
 Audio Clip：音频剪辑
 Output：输出
 Audio Mixer Group：音频混音器组
 Mute：静音
 Bypass Effectes：绕过效果
 Bypass Listener Effects：绕过监听器效果
 Bypass Reverb Zones：绕过混响区
 Play On Wake：开始时播放
 Loop：循环
 Priority：优先
 Volume：音量
 Pitch：
 Stereo Pan：
 Spatial Blend：空间混合
 Reverb Zone Mix：
  2.3D Sound Setting
 Doppler Level：多普勒级别 Spread：传播 Volume Rolloff： Min Distance：最小距离 Max Distance：最大距离   </description>
    </item>
    
    <item>
      <title>脚本的输入与控制</title>
      <link>/post/script-input_control/</link>
      <pubDate>Mon, 30 Jul 2018 16:36:45 +0800</pubDate>
      
      <guid>/post/script-input_control/</guid>
      <description>鼠标输入 1.OnMouse方法  OnMouseEnter()：当鼠标进入GUIElement或Collider时调用。（只调用一次）
OnMouseExit()：鼠标离开GUIElement或Collider时调用。
OnMouseOver()：鼠标悬停在GUIElement或Collider上时调用每一帧。
OnMouseDown()：鼠标在GUIElement或Collider上点击时调用。
OnMouseIp()：释放鼠标按钮时调用。
OnMouseDrag()：鼠标拖拽GUIElement或Collider时调用。
OnMouseUpAsButton()：只有当鼠标在同一个GUIElement或Collider按下，释放时调用。
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class ObjectController : MonoBehaviour { private void OnMouseEnter()//当鼠标进入GUIElement或Collider时调用。（只调用一次）  { this.transform.localScale = new Vector3(1.3f, 1.3f, 1.3f);//物体放大1.3倍  } private void OnMouseExit()//鼠标离开  { this.transform.localScale = new Vector3(1f, 1f, 1f);//大小还原  this.transform.rotation = new Quaternion(0f,0f,0f,0f);//位置还原  } private void OnMouseOver()//鼠标悬停在GUIElement或Collider上时调用每一帧。  { this.</description>
    </item>
    
    <item>
      <title>MonoBehavior 常用方法</title>
      <link>/post/monobehavior-common_method-01/</link>
      <pubDate>Mon, 30 Jul 2018 15:04:16 +0800</pubDate>
      
      <guid>/post/monobehavior-common_method-01/</guid>
      <description>继承函数  继承自Object
 Destroy：物体销毁
 Instantiate：物体生成
 CompareTag：物体辨认
  继承自Component
 SendMessage：消息推送   自身函数 1.Invoke：延迟执行程序
 Invoke(string methodName, float time); InvokeRepeating(string methodName, float time, float repeatRate);   重复调用函数，重复间隔。
  IsInvoking(string methodName);   检测是否在继续调用。
  CanceInvoke();  CanceInvoke(string methodName);    清楚所有Invoke或针对某一函数。
    2.Coroutine：协同执行程序</description>
    </item>
    
    <item>
      <title>Monobehavior事件响应（1）</title>
      <link>/post/unity-script-01/</link>
      <pubDate>Sat, 21 Jul 2018 15:26:16 +0800</pubDate>
      
      <guid>/post/unity-script-01/</guid>
      <description>启动与刷新函数 启动  Reset() Awake()   在游戏开始之前初始化任何变量或游戏状态。
  Start   在任何Update方法之前，只调用一次。
 刷新  FixUpdate()   每个固定帧率帧都会调用此函数。 (用于物理效果)
  Update()   则每帧调用更新。(用于处理逻辑)
  LateUpdate()   每帧都会调用LateUpdate 。在调用所有Update函数后调用LateUpdate。
 交互函数 1.物理 Physic OnTriggerEnter()  当Collider进入trigger时调用
 OnTriggerStay()  当Collider停留trigger时每一帧被调用
 OnTriggerExit()  当Collider离开trigger时调用
 OnaCollisionEnter()  当collider/rigidbody触发另一个rigidbody/collider时被调用
 OnCollisionStay()  当collider/rigidbody触发另一个rigidbody/collider时，将会在每一帧被调用
 OnCollisionExit()  当collider/rigidbody停止触发另一个rigidbody/collider时被调用
 2.输入 Input 3.渲染 Rendering 4.对象与组件 OnEnable()  当对象变为可用或激活状态时此函数被调用</description>
    </item>
    
    <item>
      <title>Unity 注意事项</title>
      <link>/post/unity-notes-01/</link>
      <pubDate>Sat, 21 Jul 2018 10:38:10 +0800</pubDate>
      
      <guid>/post/unity-notes-01/</guid>
      <description> 疑难杂症——👇 一亿个注意: 1.Local和Global  Local是指的自身的坐标，Global指的是世界坐标。
假如一个物体没有父物体（即这个物体不是某个物体的子物体），或者父物体的坐标为（0，0，0）。这时候Local和Global的坐标是一样的。
假如有父物体，Local坐标是相对与父物体的坐标，而Global是指在空间中实际的坐标。
 2.Awake()和Start()  Awake()在游戏开始时自动调用，无论是否激活脚本组件都能被调用，一般用来创建变量。
Start()在Awake之后Update之前，一般用来初始化变量。
 3.Update()和FixUpdate()  Update()每一帧调用一次，一般用于非物理运动，如逻辑运算 。
Fixupdate()每隔固定时间调用一次，通过Edit-&amp;gt;Project Settings-&amp;gt;Time 进行设置，默认为20毫秒 ，一般用于物理运动。
 4.transform01translate0  transform是Gameobject的位置属性，translate是一个动作属性。
获取某个object的位置信息时就是transform，若是对其做动作，那就translate。
 5. </description>
    </item>
    
  </channel>
</rss>