<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Game Frame on PY-&gt; Blog</title>
    <link>/categories/game-frame/</link>
    <description>Recent content in Game Frame on PY-&gt; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>us-en</language>
    <lastBuildDate>Fri, 31 Aug 2018 17:52:54 +0800</lastBuildDate>
    
	<atom:link href="/categories/game-frame/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UI模块封装——游戏框架-05</title>
      <link>/post/game-frame-05/</link>
      <pubDate>Fri, 31 Aug 2018 17:52:54 +0800</pubDate>
      
      <guid>/post/game-frame-05/</guid>
      <description>UI模块  UI 流程：  拼出大致UI效果图 UI小图片 &amp;mdash;&amp;gt; TexturePacker打包图集 （.png有A通道，.jpg没有） &amp;mdash;&amp;gt; Unity下载TexturePacker的导入插件 拼UI： 新建Canves &amp;mdash;&amp;gt; 新建Panel （背景设为UI效果图，照着拼，以Panel为单位，一个Panel一个界面） &amp;mdash;&amp;gt; 划分UI层级 写代码： ↓↓↓↓       MVC模式（Model–view–controller）     模型（Model） 数据模型（数据结构，username、password）。用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。   视图（View） 能够实现数据有目的的显示（理论上，这不是必需的）。   控制器（Controller） 逻辑控制层。起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。“事件”包括用户的行为和数据 Model 上的改变。     控制器（Controller）：由UIManager管理所有Panel，由PanelManager管理所有子控件。
 子控件发生事件让其主动’上报‘，所以给需要的控件添加UIBehaviour脚本。 UIBehaviour会将自己注册到UIManager。 UIManager：保存注册到UIManager里的子控件。  销毁：
 将后面还用到的界面隐藏（背包界面，菜单界面） 将后面用不到的界面Destory（登录界面）  资源的加载：
 Loading界面 还会加载后面要用的资源到内存（Resources.Load），不实例化。用到时GameObject.Instantiate将内存中资源实例化到场景中。 进入二级Loading界面会将前面的资源卸载，加载后面的资源。   注意事项：   在同一个Panel里要使用的控件的名字不能一样！</description>
    </item>
    
    <item>
      <title>音效模块封装——游戏框架-04</title>
      <link>/post/game-frame-04/</link>
      <pubDate>Thu, 30 Aug 2018 07:19:04 +0800</pubDate>
      
      <guid>/post/game-frame-04/</guid>
      <description>音效模块  Audio Manager（音效管理）管理Source Manager和Clips Manager，Source Manager管理多个AudioSource，Clips Manager管理多个AudioClips。
   抽象AudioSource： 抽象AudioClips：     1. 能够从所有的AudioSource中拿出一个空闲的AudioSource 1. 根据名字找出对应的Clips   2. 释放多余的（空闲的）AudioSource 2. 通过配置文件读取名字   3. 播放一个音效 3. 加载到内存   4. 停止播放     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298  using System.</description>
    </item>
    
    <item>
      <title>http WWW封装——游戏框架-03</title>
      <link>/post/game-frame-03/</link>
      <pubDate>Wed, 29 Aug 2018 15:15:31 +0800</pubDate>
      
      <guid>/post/game-frame-03/</guid>
      <description>WWW类  WWW：
 http请求：超文本协议，点击一次，请求一次数据，返回一个数据（json、xml、protbuffer&amp;hellip;）。
 Get请求：参数在连接里面，链接的 ？、# 或其他符号后都是参数。 Post请求：参数在表单里面，服务器在底层看见Post请求，会自动分配一个大空间（传输大文件）。  WWW下载本地文件：根据不同平台，有不同前缀
 IOS：http://, https:// and file:// Android：jar:file:// PC：File:///   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118  using System.</description>
    </item>
    
    <item>
      <title>常用设计模式——游戏框架-02</title>
      <link>/post/game-frame-02/</link>
      <pubDate>Wed, 22 Aug 2018 14:25:14 +0800</pubDate>
      
      <guid>/post/game-frame-02/</guid>
      <description>设计模式 单例模式  单例模式：在软件生命周期，有且只有一个实例（不占内存空间）。
1 2 3 4 5 6 7 8 9  //class 抽象概念 //每new一个（实例化）就会占用一块内存 //相互没有关联  //如果是单例，就可以省去麻烦 public static Instance; //以static const修饰为全局变量,只会实例化一次 static const _Instance;    有两种方式：
 继承MonoBehaviour：拖拽挂载脚本相当于new，一般用在组织框架（模块）的管理器上。 非继承：   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  //非继承MonoBehaviour通用写法  public class TestSingl { private static TestSingl instance; public static TestSingl Instance { get { if(instamce == null) instamce = new TestSingl(); return instance; } } }   工厂模式  工厂模式：交给工厂一个任务，就会产出一个产品，无需关心生产过程。</description>
    </item>
    
    <item>
      <title>设计原则——游戏框架-01</title>
      <link>/post/game-frame-01/</link>
      <pubDate>Mon, 13 Aug 2018 21:05:01 +0800</pubDate>
      
      <guid>/post/game-frame-01/</guid>
      <description>设计原则   注意   适应变化（有层次感；有变更，代码改动小） 提高代码重用率（封装调用） 可维护性（） 可扩展性   框架  总结把所有类型游戏共用方法封装，随时调用。
涉及 图形学 opengl，工程学，算法。
 原则   单一原则：就负责一件事，模块化，分开，提高效率
 开闭原则：一个实体（类，函数，模块等）应该对外扩展开放，对内修改关闭。
  每次发生变化，通过添加新的代码来增强现有类型的行为，而不是修改原有代码。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class program(){ age = 10; public intAge { get{} set{} } //或者  public void GetAge(Int tempAge) { this.age = tempAge; } }    依赖倒置原则：指的是抽象不应依赖于细节，也就是提出“面向接口编程，而不是面向实现编程”，可以降低客户与具体实现的耦合  1.</description>
    </item>
    
  </channel>
</rss>