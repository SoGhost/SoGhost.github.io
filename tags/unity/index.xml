<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on PY-&gt; Blog</title>
    <link>/tags/unity/</link>
    <description>Recent content in Unity on PY-&gt; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>us-en</language>
    <lastBuildDate>Mon, 30 Jul 2018 16:36:45 +0800</lastBuildDate>
    
	<atom:link href="/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>脚本的输入与控制</title>
      <link>/post/script-input-and-control/</link>
      <pubDate>Mon, 30 Jul 2018 16:36:45 +0800</pubDate>
      
      <guid>/post/script-input-and-control/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MonoBehavior 常用方法</title>
      <link>/post/monobehavior-common-method/</link>
      <pubDate>Mon, 30 Jul 2018 15:04:16 +0800</pubDate>
      
      <guid>/post/monobehavior-common-method/</guid>
      <description> 继承函数  继承自Object
 Destroy：物体销毁
 Instantiate：物体生成
 CompareTag：物体辨认
  继承自Component
 SendMessage：消息推送   自身函数  Invoke：延迟执行程序 Coroutine：协同执行程序  </description>
    </item>
    
    <item>
      <title>Unity Script</title>
      <link>/post/unity-script/</link>
      <pubDate>Sat, 21 Jul 2018 15:26:16 +0800</pubDate>
      
      <guid>/post/unity-script/</guid>
      <description>Monobehavior事件响应 启动与刷新函数 启动  Reset() Awake() Start  刷新  FixUpdate() Update() LateUpdate()  交互函数 1.物理 Physic OnTriggerEnter()  当Collider进入trigger时调用
 OnTriggerStay()  当Collider停留trigger时每一帧被调用
 OnTriggerExit()  当Collider离开trigger时调用
 OnaCollisionEnter()  当collider/rigidbody触发另一个rigidbody/collider时被调用
 OnCollisionStay()  当collider/rigidbody触发另一个rigidbody/collider时，将会在每一帧被调用
 OnCollisionExit()  当collider/rigidbody停止触发另一个rigidbody/collider时被调用
 2.输入 Input 3.渲染 Rendering 4.对象与组件 OnEnable()  当对象变为可用或激活状态时此函数被调用
 OnDisable()  当对象变为不可用或非激活状态时此函数被调用
 OnDestroy()  当Monobehavior（脚本）被销毁时运行
 Transform 场景物体的变换 1.坐标系 变量  Right—&amp;gt;X axis Up—&amp;gt;Y axis Forward—&amp;gt;Z axis worldTolocalMatrix localToworldMatrix  函数方法  TransformPoint()   变换位置从自身坐标到世界坐标</description>
    </item>
    
    <item>
      <title>Unity 注意事项</title>
      <link>/post/unity-notes/</link>
      <pubDate>Sat, 21 Jul 2018 10:38:10 +0800</pubDate>
      
      <guid>/post/unity-notes/</guid>
      <description> 疑难杂症——👇 一亿个注意: 1.Local和Global  Local是指的自身的坐标，Global指的是世界坐标。
假如一个物体没有父物体（即这个物体不是某个物体的子物体），或者父物体的坐标为（0，0，0）。这时候Local和Global的坐标是一样的。
假如有父物体，Local坐标是相对与父物体的坐标，而Global是指在空间中实际的坐标。
 2.Awake()和Start()  Awake()在游戏开始时自动调用，无论是否激活脚本组件都能被调用，一般用来创建变量。
Start()在Awake之后Update之前，一般用来初始化变量。
 3.Update()和FixUpdate()  Update()每一帧调用一次，一般用于非物理运动，如逻辑运算 。
Fixupdate()每隔固定时间调用一次，通过Edit-&amp;gt;Project Settings-&amp;gt;Time 进行设置，默认为20毫秒 ，一般用于物理运动。
 4.transform01translate0  transform是Gameobject的位置属性，translate是一个动作属性。
获取某个object的位置信息时就是transform，若是对其做动作，那就translate。
 5. </description>
    </item>
    
  </channel>
</rss>